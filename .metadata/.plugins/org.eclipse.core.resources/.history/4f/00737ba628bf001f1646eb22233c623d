package net.minecraft.sound;

import java.io.*;
import java.nio.ByteBuffer;

import javax.sound.sampled.*;

import org.lwjgl.BufferUtils;
import org.lwjgl.openal.AL10;

import net.minecraft.Minecraft;

public class WaveData
{
    public int totalBytes, bytesPerFrame, format;
    private AudioInputStream stream;
    private byte[] dataArray;
    private ByteBuffer data;
    
    private WaveData(AudioInputStream stream)
    {
        this.stream = stream;
        AudioFormat audioFormat = stream.getFormat();
        format = getFormat(audioFormat.getChannels(), audioFormat.getSampleSizeInBits());
        bytesPerFrame = audioFormat.getFrameSize();
        totalBytes = (int) (stream.getFrameLength() * bytesPerFrame);
        data = BufferUtils.createByteBuffer(totalBytes);
        dataArray = new byte[totalBytes];
        loadData();
    }
    
    public void dispose()
    {
        try
        {
            stream.close();
        } catch (IOException e) {}
    }
    
    private ByteBuffer loadData()
    {
        try
        {
            int bytesRead = stream.read(dataArray, 0, totalBytes);
            data.clear();
            data.put(dataArray, 0, bytesRead);
            data.flip();
        }
        
        catch (IOException e)
        {
            Minecraft.LOGGER.error("Couldn't read bytes from audio stream!");
        }
        
        return data;
    }
    
    public static WaveData create(String sound)
    {
        try (InputStream stream = new BufferedInputStream(WaveData.class.getResourceAsStream("assets/sounds/" + sound));
             AudioInputStream audio = AudioSystem.getAudioInputStream(stream))
        {
            return new WaveData(audio);
        }
        
        catch (IOException | UnsupportedAudioFileException e)
        {
            Minecraft.LOGGER.error("Couldn't find " + sound + ".");
            return null;
        }
    }
    
    private static int getFormat(int channels, int bitsPerSample)
    {
        if (channels == 1)
            return bitsPerSample == 8 ? AL10.AL_FORMAT_MONO8 : AL10.AL_FORMAT_MONO16;
        else
            return bitsPerSample == 8 ? AL10.AL_FORMAT_STEREO8 : AL10.AL_FORMAT_STEREO16;
    }
}
