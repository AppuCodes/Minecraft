package net.minecraft.render;

import static org.lwjgl.opengl.GL11.*;

import java.util.ArrayList;

import net.minecraft.Minecraft;
import net.minecraft.level.*;
import net.minecraft.level.Chunk.WaterPos;
import net.minecraft.level.blocks.Blocks;
import net.minecraft.level.entities.Player;
import net.minecraft.render.culling.Frustum;

public class LevelRenderer
{
    private Tessellator tessel = new Tessellator(256 * 256);
    public ArrayList<WaterPos> waters = new ArrayList<>();
    public boolean waterRebuild = false;
    private Player player;
    private Level level;
    
    public void draw(float partialTicks)
    {
        player = Minecraft.player;
        translateCamera(partialTicks);
        drawBlocks();
    }
    
    public void translateCamera(float partialTicks)
    {
        glRotatef(player.pitch, 1, 0, 0);
        glRotatef(player.yaw, 0, 1, 0);
        
        double x = player.dX + (player.x - player.dX) * partialTicks,
               y = player.dY + (player.y - player.dY) * partialTicks,
               z = player.dZ + (player.z - player.dZ) * partialTicks;
        
        glTranslated(-x, -y - player.eyeHeight, -z);
    }
    
    public void drawBlocks()
    {
        glEnable(GL_TEXTURE_2D);
        Textures.load("blocks", true);
        Frustum.calculate();
        enableStates(GL_VERTEX_ARRAY, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY);
        
        for (int i = 0; i < level.chunks.size(); i++)
        {
            Chunk chunk = level.chunks.get(i);
            
            if (chunk != null && Frustum.cubeInFrustum(chunk.pos.x * 16, 0, chunk.pos.z * 16, (chunk.pos.x + 1) * 16, 128, (chunk.pos.z + 1) * 16))
                chunk.draw();
        }
        
        buildWaters();
        tessel.draw();
        disableStates(GL_VERTEX_ARRAY, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY);
        glDisable(GL_TEXTURE_2D);
    }
    
    public void buildWaters()
    {
        if (waterRebuild)
        {
            tessel.begin();
            
            for (int i = 0; i < waters.size(); i++)
            {
                WaterPos water = waters.get(i);
                
                if (water != null)
                {
                    if (!level.chunks.contains(water.chunk()))
                        waters.remove(water);
                    else Blocks.getBlock(Blocks.WATER.id).draw(water.x(), water.y(), water.z(), tessel, Minecraft.level);
                }
            }
            
            tessel.end();
            waterRebuild = false;
        }
    }
    
    private void enableStates(int... states)
    {
        for (int state : states)
            glEnableClientState(state);
    }
    
    private void disableStates(int... states)
    {
        for (int state : states)
            glDisableClientState(state);
    }

    public LevelRenderer(Level level)
    {
        this.level = level;
    }
    
    public float celestialAngle(float partialTicks)
    {
        level.time = 15000;
        int cycle = (int) (level.time % 24000L);
        float angle = ((cycle + partialTicks) / 24000);
        
        if (angle < 0) angle = 1;
        else if (angle > 1) angle = 0;
        
        angle = (float) (1 - (Math.cos(angle * Math.PI) + 1) / 2);
        return angle;
    }
}
