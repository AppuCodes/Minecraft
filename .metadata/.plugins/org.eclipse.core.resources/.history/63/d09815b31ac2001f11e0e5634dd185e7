package net.minecraft.level.blocks;

import net.minecraft.level.Level;
import net.minecraft.level.blocks.Blocks.Block;
import net.minecraft.level.lighting.LightEngine;
import net.minecraft.render.Tessellator;

public class WaterLiquid extends Block
{
    public WaterLiquid(String name, int id, int texture)
    {
        super(name, id, texture);
    }
    
    public void draw(int x, int y, int z, Tessellator tessel, Level level)
    {
        float u1 = tex / 16F, u2 = u1 + 16 / 256F,
              v1 = 0, v2 = v1 + 16 / 256F,
              shadeX = 0.6F, shadeY = 1, shadeZ = 0.8F;
        
        float rx1 = x + 0, rx2 = x + 1,
              ry1 = y + 0, ry2 = y + 1,
              rz1 = z + 0, rz2 = z + 1;
        
        byte block;
        
//        if ((block = level.getBlock(x, y - 1, z)) == 0 || block == Blocks.WATER.id)
//        {
//            shadeY = LightEngine.getLight(x, y - 1, z, level) / 16F;
//            tessel.color(shadeY, shadeY, shadeY);
//            tessel.tex(u1, v2);
//            tessel.vertex(rx1, ry1, rz2);
//            tessel.tex(u1, v1);
//            tessel.vertex(rx1, ry1, rz1);
//            tessel.tex(u2, v1);
//            tessel.vertex(rx2, ry1, rz1);
//            tessel.tex(u2, v2);
//            tessel.vertex(rx2, ry1, rz2);
//        }
//        
//        if ((block = level.getBlock(x, y + 1, z)) == 0 || block == Blocks.WATER.id)
//        {
            shadeY = LightEngine.getLight(x, y + 1, z, level) / 16F;
            tessel.color(shadeY, shadeY, shadeY);
            tessel.tex(u2, v2);
            tessel.vertex(rx2, ry2, rz2);
            tessel.tex(u2, v1);
            tessel.vertex(rx2, ry2, rz1);
            tessel.tex(u1, v1);
            tessel.vertex(rx1, ry2, rz1);
            tessel.tex(u1, v2);
            tessel.vertex(rx1, ry2, rz2);
//        }
//        
//        if ((block = level.getBlock(x, y, z - 1)) == 0 || block == Blocks.WATER.id)
//        {
//            shadeZ = (LightEngine.getLight(x, y, z - 1, level) / 16F) * 0.8F;
//            tessel.color(shadeZ, shadeZ, shadeZ);
//            tessel.tex(u2, v1);
//            tessel.vertex(rx1, ry2, rz1);
//            tessel.tex(u1, v1);
//            tessel.vertex(rx2, ry2, rz1);
//            tessel.tex(u1, v2);
//            tessel.vertex(rx2, ry1, rz1);
//            tessel.tex(u2, v2);
//            tessel.vertex(rx1, ry1, rz1);
//        }
//        
//        if ((block = level.getBlock(x, y, z + 1)) == 0 || block == Blocks.WATER.id)
//        {
//            shadeZ = (LightEngine.getLight(x, y, z + 1, level) / 16F) * 0.8F;
//            tessel.color(shadeZ, shadeZ, shadeZ);
//            tessel.tex(u1, v1);
//            tessel.vertex(rx1, ry2, rz2);
//            tessel.tex(u1, v2);
//            tessel.vertex(rx1, ry1, rz2);
//            tessel.tex(u2, v2);
//            tessel.vertex(rx2, ry1, rz2);
//            tessel.tex(u2, v1);
//            tessel.vertex(rx2, ry2, rz2);
//        }
//        
//        if ((block = level.getBlock(x - 1, y, z)) == 0 || block == Blocks.WATER.id)
//        {
//            shadeX = (LightEngine.getLight(x - 1, y, z, level) / 16F) * 0.6F;
//            tessel.color(shadeX, shadeX, shadeX);
//            tessel.tex(u2, v1);
//            tessel.vertex(rx1, ry2, rz2);
//            tessel.tex(u1, v1);
//            tessel.vertex(rx1, ry2, rz1);
//            tessel.tex(u1, v2);
//            tessel.vertex(rx1, ry1, rz1);
//            tessel.tex(u2, v2);
//            tessel.vertex(rx1, ry1, rz2);
//        }
//        
//        if ((block = level.getBlock(x + 1, y, z)) == 0 || block == Blocks.WATER.id)
//        {
//            shadeX = (LightEngine.getLight(x + 1, y, z, level) / 16F) * 0.6F;
//            tessel.color(shadeX, shadeX, shadeX);
//            tessel.tex(u1, v2);
//            tessel.vertex(rx2, ry1, rz2);
//            tessel.tex(u2, v2);
//            tessel.vertex(rx2, ry1, rz1);
//            tessel.tex(u2, v1);
//            tessel.vertex(rx2, ry2, rz1);
//            tessel.tex(u1, v1);
//            tessel.vertex(rx2, ry2, rz2);
//        }
    }
}
